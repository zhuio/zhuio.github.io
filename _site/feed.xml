<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://zhuio.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://zhuio.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zhuio.github.io/" rel="alternate" type="text/html" /><updated>2017-02-12T17:39:35+08:00</updated><id>https://zhuio.github.io/</id><title type="html">朱智博在Github上的Blog</title><subtitle>朱智博，朱智博的博客，zhuio,zhuio.github.io,</subtitle><entry><title type="html">flask框架5</title><link href="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B65/" rel="alternate" type="text/html" title="flask框架5" /><published>2017-02-12T15:37:00+08:00</published><updated>2017-02-12T15:37:00+08:00</updated><id>https://zhuio.github.io/flask框架5</id><content type="html" xml:base="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B65/">&lt;h2 id=&quot;动态基于用户的内容flask教程&quot;&gt;动态基于用户的内容Flask教程&lt;/h2&gt;

&lt;p&gt;虽然我们可以使用装饰器来包围访问控制的函数，但我们也可以使用我们的Jinja模板逻辑来控制视图。例如，现在，当我们登录我们的网站时，我们仍然在右上角有一个“登录”按钮。&lt;/p&gt;

&lt;p&gt;我们应该真的让登录按钮消失，与注册按钮一样，然后添加一个“注销”按钮。&lt;/p&gt;

&lt;p&gt;我们实际上可以在我们的HTML文件中处理所有这些，所以让我们访问我们的header.html文件。&lt;/p&gt;

&lt;p&gt;找到与navbar相关联的代码，然后替换为一些逻辑：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	  &amp;lt;ul class=&quot;nav navbar-nav navbar-right&quot;&amp;gt;
		    &amp;lt;div style=&quot;margin-right: 10px; margin-left: 15px; margin-top: 5px; margin-bottom: 5px;&quot;  class=&quot;container-fluid&quot;&amp;gt;
			&amp;lt;h5&amp;gt;
				&amp;amp;#123;% if session.logged_in %}
				&amp;lt;a href=&quot;/support-donate/&quot;&amp;gt; &amp;lt;span class=&quot;glyphicon glyphicon-heart&quot;&amp;gt;&amp;lt;/span&amp;gt; Support   &amp;lt;/a&amp;gt;
				&amp;lt;a href=&quot;/logout/&quot;&amp;gt;&amp;lt;span class=&quot;glyphicon glyphicon-log-out&quot;&amp;gt;&amp;lt;/span&amp;gt; Logout   &amp;lt;/a&amp;gt;
				&amp;amp;#123;% else %}
				&amp;lt;a href=&quot;/support-donate/&quot;&amp;gt; &amp;lt;span class=&quot;glyphicon glyphicon-heart&quot;&amp;gt;&amp;lt;/span&amp;gt; Support   &amp;lt;/a&amp;gt;
				&amp;lt;a href=&quot;/login/&quot;&amp;gt;&amp;lt;span class=&quot;glyphicon glyphicon-log-in&quot;&amp;gt;&amp;lt;/span&amp;gt; Login   &amp;lt;/a&amp;gt;
				&amp;lt;a href=&quot;/register/&quot;&amp;gt;&amp;lt;span class=&quot;glyphicon glyphicon-pencil&quot;&amp;gt;&amp;lt;/span&amp;gt; Sign up&amp;lt;/a&amp;gt;
				&amp;amp;#123;% endif %}
			&amp;lt;/div&amp;gt;

			&amp;lt;/h5&amp;gt;
		  &amp;lt;/div&amp;gt;
      &amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要注意的两件事：我们显然能够引用会话，我们不需要在我们的模板中“导入”它。这样的逻辑在你的HTML可以抛出一个循环的默认标签识别/突出显示！&lt;/p&gt;

&lt;p&gt;Jinja模板基本上有一个“从烧瓶进口*”在幕后。您可以在模板中引用任何Flask内容，而无需将其导入模板或脚本。&lt;/p&gt;

&lt;p&gt;当你构建这样的HTML逻辑，特别是当它影响用户看到什么，你可能会发现它破坏了自然的突出显示，你的编辑器可能会标记的东西，如标签没有关闭等。使用你更好的判断。有时，如果内容足够厚，并且是一种if / else类似上面，我将删除每个块，一次一个，并检查以确保一切连接正确。&lt;/p&gt;

&lt;p&gt;不管什么，但是，它可以是混乱。注意它，特别是如果你让你的编辑器自动关闭或移动标签。&lt;/p&gt;</content><category term="flask" /><summary type="html">动态基于用户的内容Flask教程</summary></entry><entry><title type="html">flask框架4</title><link href="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B64/" rel="alternate" type="text/html" title="flask框架4" /><published>2017-02-12T15:36:00+08:00</published><updated>2017-02-12T15:36:00+08:00</updated><id>https://zhuio.github.io/flask框架4</id><content type="html" xml:base="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B64/">&lt;h2 id=&quot;flask装饰器---login_required页面flask教程&quot;&gt;Flask装饰器 - Login_Required页面Flask教程&lt;/h2&gt;

&lt;p&gt;现在我们可以让用户注册和登录，我们也允许他们注销。这是有一点意义，不让用户注销，除非他们登录！&lt;/p&gt;

&lt;p&gt;您还可能会发现您想要保护各种页面，例如管理页面，或者您有订阅者内容或其他受保护或付费内容。&lt;/p&gt;

&lt;p&gt;你可以使用包装函数。人们倾向于避开包装函数和装饰器，因为它们可能是混乱的。但是，看看你，你一直在使用他们这一次！Flask使用它们进行URL路由。让我们展示如何使我们自己的！这其实很简单！&lt;/p&gt;

&lt;p&gt;首先，我们向我们的__init__.py文件添加一个login_required函数：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;    &lt;span class=&quot;nt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;login_required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;@wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'logged_in'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;You need to login first&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'login_page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里，我们定义函数，其中参数是f，这是约定的事实，它包装一个函数。然后，我们定义包装器。&lt;/p&gt;

&lt;p&gt;我们的包装器很简单，只是简单地检查用户在会话中是否有“logged_in”。如果是这样，伟大。如果没有，他们会收到一条Flash消息和重定向到登录页面。&lt;/p&gt;

&lt;p&gt;现在我们有了包装器函数，我们准备好将它应用到任何我们想要的登录。例如，我们可以将其应用于我们的注销页面，如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@app.route(&quot;/logout/&quot;)
@login_required
def logout():
    session.clear()
    flash(&quot;You have been logged out!&quot;)
    gc.collect()
    return redirect(url_for('dashboard'))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;很简单，在app.route包装器的下面，我们还添加了另一个包装器，它是login_required包装器。现在，为了甚至得到注销函数，用户必须首先尝试访问顶部包装器中的URL，然后他们还需要满足下一个包装器的条件，然后他们可以最终到达logout（）函数！&lt;/p&gt;</content><category term="flask" /><summary type="html">Flask装饰器 - Login_Required页面Flask教程</summary></entry><entry><title type="html">flask框架3</title><link href="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B63/" rel="alternate" type="text/html" title="flask框架3" /><published>2017-02-12T15:34:00+08:00</published><updated>2017-02-12T15:34:00+08:00</updated><id>https://zhuio.github.io/flask框架3</id><content type="html" xml:base="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B63/">&lt;h2 id=&quot;flask用户登录系统教程&quot;&gt;Flask用户登录系统教程&lt;/h2&gt;

&lt;p&gt;它让我们相当多，但在这里我们是：登录页面！如果你还没有，那么你应该注册一些用户，并记住其中之一，以测试我们的登录页面，当我们完成。&lt;/p&gt;

&lt;p&gt;我们已经有了登录模板，我们可以保留，但现在验证过程需要验证我们的数据库中的用户，而不是硬编码的管理员用户。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Part of __init__.py file&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@app.route('/login/', methods=[&quot;GET&quot;,&quot;POST&quot;])
def login_page():
    error = ''
    try:
        c, conn = connection()
        if request.method == &quot;POST&quot;:

            data = c.execute(&quot;SELECT * FROM users WHERE username = (%s)&quot;,
                             thwart(request.form['username']))

            data = c.fetchone()[2]

            if sha256_crypt.verify(request.form['password'], data):
                session['logged_in'] = True
                session['username'] = request.form['username']

                flash(&quot;You are now logged in&quot;)
                return redirect(url_for(&quot;dashboard&quot;))

            else:
                error = &quot;Invalid credentials, try again.&quot;

        gc.collect()

        return render_template(&quot;login.html&quot;, error=error)

    except Exception as e:
        #flash(e)
        error = &quot;Invalid credentials, try again.&quot;
        return render_template(&quot;login.html&quot;, error = error)  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这里，我们使用我们写的连接文件来连接到数据库（dbconnect.py），它有一个名为connection的函数。&lt;/p&gt;

&lt;p&gt;我们对POST方法进行与前面相同的检查。如果是这样，我们将查询数据库以查看该人员输入的用户名是否在数据库中，而不是忘记使用thwart来防止SQL注入。&lt;/p&gt;

&lt;p&gt;接下来，如果用户名存在，我们然后将尝试的用户名与我们记录的散列密码进行比较，验证存储的散列的来源是否与用户尝试的密码相同。&lt;/p&gt;

&lt;p&gt;如果是这样，那么我们通过Flask的会话功能登录用户，然后我们将它们发送到仪表板，因为他们都完成了登录页面。&lt;/p&gt;

&lt;p&gt;如果出现任何问题，我们给出的错误只是“凭据无效，请重试”。您可以提供自定义错误，例如该用户名不存在或密码错误，但有人试图破解您的网站或用户名可以使用它的优势，知道他们错了什么。&lt;/p&gt;</content><category term="flask" /><category term="hash" /><summary type="html">Flask用户登录系统教程</summary></entry><entry><title type="html">flask框架2</title><link href="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B62/" rel="alternate" type="text/html" title="flask框架2" /><published>2017-02-12T15:33:00+08:00</published><updated>2017-02-12T15:33:00+08:00</updated><id>https://zhuio.github.io/flask框架2</id><content type="html" xml:base="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B62/">&lt;h2 id=&quot;flask教程的密码哈希&quot;&gt;Flask教程的密码哈希&lt;/h2&gt;

&lt;p&gt;虽然我们已经将密码哈希加入我们的注册页面，我想花一些时间来讨论实际发生的事情。也许你最终使用另一种语言，或者也许passlib不支持你在未来使用的Python版本。正因为如此，你应该至少在高层了解它是如何工作的。&lt;/p&gt;

&lt;p&gt;它不仅对安全实践很重要，它也只是很酷的工作原理！&lt;/p&gt;

&lt;p&gt;首先，你可能会理解为什么对密码进行加密很重要。如果您的数据库存储纯文本密码，至少您将自己查看密码，因此任何有权访问您的服务器的人都可以看到密码。在一个完美的世界中，没有人会侵犯用户的隐私，但这个世界并不完美。不仅如果你使用虚拟专用服务器，或者共享主机，那么为你工作的人可能窃取用户密码，黑客可能，甚至是你的服务器的主机。&lt;/p&gt;

&lt;p&gt;那么，我们如何掩盖密码？遮掩原始文本很容易，我们可以对一个随机的算法做到这一点。问题是，使用密码，我们实际上需要能够验证用户将来输入作为原始密码。&lt;/p&gt;

&lt;p&gt;采取的更原始的措施之一是简单的密码哈希。这是一个哈希函数应用于用户输入的内容，该哈希是作为密码存储的内容。&lt;/p&gt;

&lt;p&gt;这里有一个简单的哈希脚本来说明这一点，你可以运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import hashlib
password = 'pa$$w0rd'
h = hashlib.md5(password.encode())
print(h.hexdigest())


	导入hashlib，设置示例密码，创建哈希对象，打印哈希：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;6c9b8b27dea1ddb845f96aa2567c6754&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;所以工作相当不错。如果你刚刚在数据库中看到了哈希，你不知道这是什么意思。但是，出现以下问题：运行脚本两次，或五次。你会发现每次的输出是相同的。最初，考虑到验证，你可能认为这不是一个要求吗？我们还能如何实现验证？&lt;/p&gt;

&lt;p&gt;这里的问题是人们创建了大量的哈希表，特别是称为哈希查找表，在那里你可以搜索哈希，然后找到相应的明文密码。你也可以自己创建一个，只需为字符组合生成哈希。生成表需要更长的时间。这些表是大的，但不是太大，不能存储在你的笔记本电脑或上网本。&lt;/p&gt;

&lt;p&gt;我们需要的是一种生成唯一哈希的方法，但是通过询问两个哈希是否来自同一个输入，尽管它们是非常不同的哈希，仍然找到一种验证哈希的方法。&lt;/p&gt;

&lt;p&gt;然而，在到达之前，人们提出了一个更简单的解决方案：为什么不放置一个秘密模式的文本到每个输入的密码，只有我们的服务器知道。这就是所谓的“盐析”。&lt;/p&gt;

&lt;p&gt;盐渍，虽然仍然使用，最初开始很简单。这里有一个例子说明如何盐化工作，建立我们最后的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import hashlib

user_entered_password = 'pa$$w0rd'
salt = &quot;5gz&quot;
db_password = user_entered_password+salt
h = hashlib.md5(db_password.encode())
print(h.hexdigest())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这里，唯一的主要区别是我们只有一个盐，我们追加到最后。然后，任何时候用户输入他们的密码，我们添加salt，哈希，然后比较这些哈希。
&lt;code class=&quot;highlighter-rouge&quot;&gt;de6e389819bdaa9e0ca60bb52cabccae&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;现在，盐可以在任何地方添加。也许是在中间的输入，也许在开始，也许在结束。你可以在开始时有一个盐，另一个在密码的中间，另一个在最后甚至。&lt;/p&gt;

&lt;p&gt;这是很好，但有固有的风险，仍然，这里是为什么：&lt;/p&gt;

&lt;p&gt;对于相同的密码，哈希始终相同。这意味着如果有人破解你生成的盐，那么他们现在通过生成哈希表破解了所有密码。这又可以进行大量的处理，但这绝不是今天的标准所无法达到的。&lt;/p&gt;

&lt;p&gt;加密的一句话是，你不能依赖于安全的保密性。对加密的一个很好的测试是问自己：“如果有人发现我的加密方法，我的安全性是否受损？在许多情况下，例如用密码，对此的答案是“是的！这是一个问题。考虑有人访问您的数据库的许多原因也意味着他们有权访问您的源代码。这意味着有人可以找到你的盐。从这里，打破加密密码的整个数据库是相对快速的工作。&lt;/p&gt;

&lt;p&gt;我们想要的是一种生成唯一哈希的方法，它们的源可以容易地验证，但是暴力强制将需要每个密码的强制强制，而不是整个数据库的暴力强制。让我们带上passlib的大枪。&lt;/p&gt;

&lt;p&gt;如果你没有passlib，你可能不会，因为它不是标准库的一部分，做一个快速：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install passlib&lt;/code&gt;
or…
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install python-passlib&lt;/code&gt;
Once you have passlib, let’s play!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from passlib.hash import sha256_crypt

password = sha256_crypt.encrypt(&quot;password&quot;)
password2 = sha256_crypt.encrypt(&quot;password&quot;)

print(password)
print(password2)

print(sha256_crypt.verify(&quot;password&quot;, password))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里我们引入passlib的哈希能力，并使用SHA256作为算法。SHA256本质上优于md5，但是在上面的例子中你可以用“sha256”替换“md5”，看到输出的哈希值保持不变，只是稍长一些。&lt;/p&gt;

&lt;p&gt;接下来，我们显示我们使用sha256_crypt从passlib哈希“密码”两次。一次到密码的变量，再一次到password2。&lt;/p&gt;

&lt;p&gt;然后我们输出两者的哈希，注意他们是不同的。&lt;/p&gt;

&lt;p&gt;最后，我们验证两个单独的哈希值来自同一个源。&lt;/p&gt;

&lt;p&gt;果然，布尔环响了，我们有一个匹配！&lt;/p&gt;

&lt;p&gt;现在，我们有一个很好的方法来保护用户密码，同时仍然能够在用户登录时验证用户。&lt;/p&gt;

&lt;p&gt;现在，考虑黑客违反我们的服务器并获得对我们的源代码和我们的数据库的要求。他们可以看到一切，但现在什么？&lt;/p&gt;

&lt;p&gt;现在，他们将不得不通过暴力破解密码，与以前一样，只是现在它是一次一个密码。Yikes。他们可以做的是获取他们的密码字典（通常是可能的密码的大量列表），生成一个散列，然后尝试验证这个散列对数据库中的所有密码，通过迭代每个并运行sha256_crypt.verify他们真/假反应。然而，这个过程是非常麻烦的，并且结果是缓慢的。这将需要很长时间，并且没有办法预先准备这里。你可能会想，他们不能通过生成SHA256哈希在高级准备？不，因为sha256_crypt也使用独特的盐。&lt;/p&gt;

&lt;p&gt;在我写这篇文章的时候，这个方法没有已知的弱点。&lt;/p&gt;

&lt;p&gt;现在，我想强调使用上面的“方法”。在方法和方法的应用之间存在主要区别。&lt;/p&gt;

&lt;p&gt;另一个加密和安全性的格言通常如下：&lt;/p&gt;

&lt;p&gt;“你可以在地球上拥有最坚固，最不可穿透的加固门保护一个房间，但如果墙仍然薄弱，那就没有好处。&lt;/p&gt;

&lt;p&gt;忘记墙壁，天花板，甚至地面都很简单。&lt;/p&gt;

&lt;p&gt;考虑你写了一个程序的逻辑多少次，认为它是坚实的，然后遇到一个错误，并“当然！你会不断犯错误，你可能知道你做了很多。有安全性，这些错误通常是未经检查，未经测试。尝试你最好的想像一个黑客，但永远记住&lt;em&gt;每个&lt;/em&gt;系统，连接到万维网，是可以攻击。只接受它，并在这个前提下工作。&lt;/p&gt;

&lt;p&gt;接受passlib可能有缺陷，有一天，或者已经有人知道SHA256的缺陷。此外，大量的密码加密系统被黑客与服务器访问极其简单：&lt;/p&gt;

&lt;p&gt;如果黑客获得对你的服务器的访问，并发现你的数据库被安全加密，他们可以做一些简单的事情，在登录表单上创建一个日志记录功能，它只是简单地保存用户键入的字段，到文本文件，或在别处传输数据。这显然不像一次获得整个数据库那么大，但是这种事情发生了。&lt;/p&gt;

&lt;p&gt;很多人也对2FA（双因素身份验证）等事情给予了很大的信任。我讨厌爆破你的泡沫，但是，虽然这种方法使很多道理，这种方法的应用程序，你，客户端和你使用的网站非常重要。&lt;/p&gt;

&lt;p&gt;作为一个开发人员，我已经设置了2FA几次。有很多选项，您可以选择安装2FA时，可以增加或阻碍安全。一个特别的，非常受欢迎的比特币钱包网站，例如，重新使用公共密钥为您的2FA。我发现这个，当我换手机。其结果是，有人可以暂时访问您的手机，访问您的帐户，重新验证2FA，您会发现在您的设备上没有任何更改。他们正在回收生成代码的公钥。现在他们只是等待你存了一大笔钱，然后他们带你。你永远不会知道你甚至是脆弱的。如果黑客也可以伪造你的会话cookie，这是另一种方式，他们可以做到这一点，他们甚至不需要你的代码。虚拟会话很难，但仍然可能。这就是为什么网站通常要求您在对帐户进行安全更改时重新输入密码。这个流行的比特币钱包网站？不，不需要重新输入您的密码。&lt;/p&gt;

&lt;p&gt;尼斯安全的门，但薄弱的墙壁。&lt;/p&gt;

&lt;p&gt;2FA错误的另一个很好的例子是当人们通过像Google一样使用2FA。很好，但如果你有你的2FA设置与谷歌验证器的Gmail帐户也不受2FA保护，你拧紧了。&lt;/p&gt;

&lt;p&gt;大门，薄弱的墙壁。&lt;/p&gt;

&lt;p&gt;最后，在让你感到脆弱之前，我将解决所有企业和服务器的最薄弱点：&lt;/p&gt;

&lt;p&gt;运行他们的人。&lt;/p&gt;

&lt;p&gt;最弱的环节总是人民。无论是因为他们犯错误，还是因为他们可以很容易地进行社交工程，人们通常是主要目标，或者至少是漏洞的原因。&lt;/p&gt;

&lt;p&gt;我甚至不能计算我看到有多少网站被黑客入侵，因为有人提出了一个管理员，并能够获得访问。这听起来很蠢，但这个骗局很容易跌倒，特别是考虑到我们生活在今天的世界，开发人员分散，通常不是所有的本地。我个人是成功版本的受害者，我有网站的开发人员是黑客，我有无尽的尝试。这是黑客做的，他们黑客。他们不断尝试，最终他们可以通过。你的工作是使它尽可能具有挑战性。&lt;/p&gt;

&lt;p&gt;这就像大多数犯罪。大多数犯罪是机会犯罪，你的工作不是最慢，最胖，最可怕的孩子从熊跑。&lt;/p&gt;</content><category term="flask" /><summary type="html">Flask教程的密码哈希</summary></entry><entry><title type="html">flask框架注册登录结构</title><link href="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B6%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%84/" rel="alternate" type="text/html" title="flask框架注册登录结构" /><published>2017-02-12T15:32:00+08:00</published><updated>2017-02-12T15:32:00+08:00</updated><id>https://zhuio.github.io/flask框架注册登录结构</id><content type="html" xml:base="https://zhuio.github.io/flask%E6%A1%86%E6%9E%B6%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%84/">&lt;h2 id=&quot;完成用户注册flask教程&quot;&gt;完成用户注册Flask教程&lt;/h2&gt;

&lt;p&gt;在这个Flask教程中，我们将包装这个注册系统。&lt;/p&gt;

&lt;p&gt;为了做到这一点，我们可能需要一个register.html页面。
&lt;code class=&quot;highlighter-rouge&quot;&gt;File: register.html Location: /var/www/PythonProgramming/PythonProgramming/templates/register.html&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;formhelpers.html&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;render_field&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;/register/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{render_field(form.username)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{render_field(form.email)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{render_field(form.password)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{render_field(form.confirm)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{render_field(form.accept_tos)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;endblock&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这是一个相当典型的注册表单，只有从我们传递的表单对象呈现的字段。&lt;/p&gt;</content><category term="flask" /><summary type="html">完成用户注册Flask教程</summary></entry><entry><title type="html">HASH2</title><link href="https://zhuio.github.io/hash2/" rel="alternate" type="text/html" title="HASH2" /><published>2017-02-12T02:02:00+08:00</published><updated>2017-02-12T02:02:00+08:00</updated><id>https://zhuio.github.io/hash2</id><content type="html" xml:base="https://zhuio.github.io/hash2/">&lt;h2 id=&quot;flask-registration-code-tutorial&quot;&gt;Flask Registration Code Tutorial&lt;/h2&gt;

&lt;p&gt;在本教程中，我们将在__init__.py中对我们的注册代码进行更多工作。&lt;/p&gt;

&lt;p&gt;在我们再进一步之前，让我们安装passlib：
&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install passlib&lt;/code&gt;
然后，向我们的__init__.py文件中添加一些导入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask, render_template, flash, request, url_for, redirect, session
from wtforms import Form, BooleanField, TextField, PasswordField, validators
from passlib.hash import sha256_crypt
from MySQLdb import escape_string as thwart
import gc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Passlib将用于密码加密，而escape_string用于防止SQL注入尝试（黑客）。gc模块用于垃圾回收（内存问题）。我们还将会话添加到flask导入，用于访问用户特定的会话/ cookie信息。我们还从wtforms导入一堆字段的东西。&lt;/p&gt;

&lt;p&gt;现在我们有一些新的register_page函数代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@app.route('/register/', methods=[&quot;GET&quot;,&quot;POST&quot;])
def register_page():
    try:
        form = RegistrationForm(request.form)

        if request.method == &quot;POST&quot; and form.validate():
            username  = form.username.data
            email = form.email.data
            password = sha256_crypt.encrypt((str(form.password.data)))
            c, conn = connection()

            x = c.execute(&quot;SELECT * FROM users WHERE username = (%s)&quot;,
                          (thwart(username)))

            if int(x) &amp;gt; 0:
                flash(&quot;That username is already taken, please choose another&quot;)
                return render_template('register.html', form=form)

            else:
                c.execute(&quot;INSERT INTO users (username, password, email, tracking) VALUES (%s, %s, %s, %s)&quot;,
                          (thwart(username), thwart(password), thwart(email), thwart(&quot;/introduction-to-python-programming/&quot;)))

                conn.commit()
                flash(&quot;Thanks for registering!&quot;)
                c.close()
                conn.close()
                gc.collect()

                session['logged_in'] = True
                session['username'] = username

                return redirect(url_for('dashboard'))

        return render_template(&quot;register.html&quot;, form=form)

    except Exception as e:
        return(str(e))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简单的，代码首先会检查方法是否是POST。请记住，用户可能只是简单地加载注册页面。如果有一个POST请求，那么我们要收集表单中的信息。&lt;/p&gt;

&lt;p&gt;一旦我们获得表单中的信息，接下来我们要做的就是连接到数据库。现在我们不希望有两个用户使用相同的用户名，因此我们首先要查看该用户名是否已经存在。如果是，我们想告诉他们用户名已经存在，让他们再试一次。&lt;/p&gt;

&lt;p&gt;如果用户名不存在，我们已经做到了这一点，这意味着我们有一个唯一的用户名，匹配的密码和一封电子邮件，可以插入我们的数据库。&lt;/p&gt;

&lt;p&gt;所以我们插入数据库，向用户发送一条消息，感谢他们注册，你就完成了。&lt;/p&gt;

&lt;p&gt;当所有设置插入，你需要确保你总是运行conn.commit（），这是“保存”您的更改到数据库。如果您忘记这样做，那么您的更改将不会保存。&lt;/p&gt;

&lt;p&gt;最后，我们使用gc.collect（）来帮助减少内存浪费。&lt;/p&gt;

&lt;p&gt;注意，我们恰好在注册后登录我们的用户，使用烧录器会话功能。&lt;/p&gt;</content><category term="HASH" /><category term="flask" /><summary type="html">Flask Registration Code Tutorial</summary></entry><entry><title type="html">HASH1</title><link href="https://zhuio.github.io/mysql3/" rel="alternate" type="text/html" title="HASH1" /><published>2017-02-12T02:01:00+08:00</published><updated>2017-02-12T02:01:00+08:00</updated><id>https://zhuio.github.io/mysql3</id><content type="html" xml:base="https://zhuio.github.io/mysql3/">&lt;h2 id=&quot;user-registration-form-flask-tutorial&quot;&gt;User Registration Form Flask Tutorial&lt;/h2&gt;

&lt;p&gt;在本教程中，我们将讨论创建我们的注册表单。虽然不需要，Flask有一个内置的窗体模块称为WTForms。要得到这个，运行：
&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install flask-wtf&lt;/code&gt;
现在，由于我们使用这个模块来创建表单，我们要做的是创建一个表单类，这将给我们一个注册表单对象，然后我们将传递给我们的模板。这听起来很困惑，但它不是那么糟！&lt;/p&gt;

&lt;p&gt;在我们的__init__.py文件中，我们将添加以下类。这是我的建议，组织和功能，你把所有的课程放在你的脚本的顶部，如果他们在许多地方使用，或者你可以把它们的功能，他们将被使用。&lt;/p&gt;

&lt;p&gt;窗体类，包含用户名，电子邮件，密码和确认密码字段。然后我们有一个“接受条件”要求的复选框。&lt;/p&gt;

&lt;p&gt;在这里注意“验证器”参数，其中我们可以指定所有类型的东西，但是我们需要各种长度规则，以及要求两个密码匹配。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class RegistrationForm(Form):
    username = TextField('Username', [validators.Length(min=4, max=20)])
    email = TextField('Email Address', [validators.Length(min=6, max=50)])
    password = PasswordField('New Password', [
        validators.Required(),
        validators.EqualTo('confirm', message='Passwords must match')
    ])
    confirm = PasswordField('Repeat Password')
    accept_tos = BooleanField('I accept the [Terms of Service](/about/tos) and [Privacy Notice](/about/privacy-policy) (updated Jan 22, 2015)', [validators.Required()])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还要注意“布尔”字段，意味着它可以是开或关，或1或0.注意，如果您希望此框是必需的复选框，您还需要在这里有验证器。如果你在这里运行一个餐厅的应用程序，人们只是选择他们的食材三明治，那么你不需要检查所有的成分。在这里，我们希望确保用户已同意我们的条款。&lt;/p&gt;</content><category term="HASH" /><category term="flask" /><summary type="html">User Registration Form Flask Tutorial</summary></entry><entry><title type="html">MySQL2</title><link href="https://zhuio.github.io/mysql2/" rel="alternate" type="text/html" title="MySQL2" /><published>2017-02-12T02:01:00+08:00</published><updated>2017-02-12T02:01:00+08:00</updated><id>https://zhuio.github.io/mysql2</id><content type="html" xml:base="https://zhuio.github.io/mysql2/">&lt;h2 id=&quot;使用mysqldb连接到mysql数据库&quot;&gt;使用MySQLdb连接到MySQL数据库&lt;/h2&gt;

&lt;p&gt;在本教程中，我们将介绍如何使用Python与MySQL数据库交互。我们使用的模块称为MySQLdb。要获得此，请在您的服务器上运行以下命令：
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install python-MySQLdb&lt;/code&gt;
一旦你有，请确保它都工作通过键入：
&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;
这应该打开一个python实例在你的服务器，所以然后做：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import MySQLdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;只要有效，就快速control+d退出python实例。&lt;/p&gt;

&lt;p&gt;接下来，我们要创建一个可以连接到数据库的Python文件。通常你将有一个单独的“连接”文件，在任何主要文件之外你可能有。这通常是跨语言的，这是为什么。最初，您可能只有一个简单的__init__.py，或app.py或任何，并且该文件将执行所有操作。然而，可能发生的时间，但是，你的网站做其他的事情。例如，我的一个网站，Sentdex.com，我执行大量的分析，将分析存储到数据库，我还操作网站供用户使用。一般来说，对于任务，你将使用所谓的“cron”。cron是在您编程运行时运行的计划任务。通常这运行另一个文件，几乎肯定不是您的网站的文件。因此，要连接到数据库，您必须在由cron运行的文件中再次写入连接代码的数据库。&lt;/p&gt;

&lt;p&gt;随着时间的推移，这些种类的需求累积起来，你有一些文件修改数据库，但你仍然希望网站能够访问它，也可以修改它。然后，考虑如果更改数据库密码可能会发生什么。然后，您需要转到连接到数据库的每个文件，并更改它。所以，通常，你会发现最聪明的事情是只创建一个文件，其中包含连接代码。这就是我们今天要建立的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import MySQLdb

def connection():
    conn = MySQLdb.connect(host=&quot;localhost&quot;,
                           user = &quot;root&quot;,
                           passwd = &quot;cookies!&quot;,
                           db = &quot;pythonprogramming&quot;)
    c = conn.cursor()

    return c, conn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;导入模块。&lt;/p&gt;

&lt;p&gt;创建一个连接函数来运行我们的代码。在这里，我们指定我们连接到的位置，用户，用户的密码，然后指定我们要连接到的数据库。&lt;/p&gt;

&lt;p&gt;引用表将在实际使用表的代码中完成。
请注意，我们使用“localhost”作为我们的主机。这只是意味着我们将使用与运行此代码相同的服务器。您也可以远程连接到数据库，这可以很漂亮。为此，您可以通过其IP或其域来连接到主机。要远程连接到数据库，您需要首先从将被访问/修改的远程数据库中允许它。&lt;/p&gt;

&lt;p&gt;接下来，让我们继续编辑我们的__init__.py文件，添加一个寄存器函数。现在我们将保持简单，大多只是为了测试我们的连接功能。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from dbconnect import connection

...		

@app.route('/register/', methods=[&quot;GET&quot;,&quot;POST&quot;])
def register_page():
    try:
        c, conn = connection()
        return(&quot;okay&quot;)
    except Exception as e:
        return(str(e))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来，让我们建立我们的注册页面。&lt;/p&gt;</content><category term="MySQL" /><category term="flask" /><summary type="html">使用MySQLdb连接到MySQL数据库</summary></entry><entry><title type="html">MySQL1</title><link href="https://zhuio.github.io/mysql1/" rel="alternate" type="text/html" title="MySQL1" /><published>2017-02-12T02:00:00+08:00</published><updated>2017-02-12T02:00:00+08:00</updated><id>https://zhuio.github.io/mysql1</id><content type="html" xml:base="https://zhuio.github.io/mysql1/">&lt;h2 id=&quot;创建mysql数据库和表flask教程&quot;&gt;创建MySQL数据库和表Flask教程&lt;/h2&gt;

&lt;p&gt;在本教程中，我们将创建我们的用户数据库，我们需要这些数据库来存储用户实际注册时的用户名和密码。&lt;/p&gt;

&lt;p&gt;如果你一直跟随这个系列，那么你已经安装了MySQL服务器和MySQL客户端。如果没有，你需要得到那些。当你得到那些，你还将设置根MySQL用户和密码。再次，如果你一直跟着，那么你已经设置了。MySQL root用户和服务器root用户是分开的，他们可以有不同的密码。他们是不同的用户。您可以将它们作为相同的密码，但这不建议用于安全性。&lt;/p&gt;

&lt;p&gt;现在，让我们登录，创建一个数据库，并创建我们的表！&lt;/p&gt;

&lt;p&gt;mysql –user=root -p&lt;/p&gt;

&lt;p&gt;在这里，我们调用mysql作为root用户登录。在输入后，系统将提示您输入密码。&lt;/p&gt;

&lt;p&gt;现在我们在MySQL客户端，由领先的mysql&amp;gt;指定。尝试输入以下内容：&lt;/p&gt;

&lt;p&gt;SHOW DATABASES;&lt;/p&gt;

&lt;p&gt;这将输出您拥有的所有现有MySQL数据库。&lt;/p&gt;

&lt;p&gt;一个常见的误解是数据库是什么，与表相比。大多数人对数据库的概念实际上更准确一个表。所以一个数据库是什么存储表。表存储数据。数据库可以只包含一个表，但底线是它实际上是包含信息的表。一个表，对于你的典型数据库非常像一个电子表格，具有简单的列和行。有更多高级版本的表和数据库，它们提供更多的维度和更多的选择，尽管典型的数据库只是逐行的。&lt;/p&gt;

&lt;p&gt;SHOW DATABASES;&lt;/p&gt;

&lt;p&gt;这将输出您拥有的所有现有MySQL数据库。&lt;/p&gt;

&lt;p&gt;CREATE DATABASE pythonprogramming;&lt;/p&gt;

&lt;p&gt;这将创建一个新的数据库，称为pythonprogramming。&lt;/p&gt;

&lt;p&gt;将所有SQL语言放在ALL-CAPS中是惯例。这是因为你打算在你的Python中键入SQL。即使是训练有素的眼睛，也很难辨别什么是Python和什么是SQL。这在所有包含SQL的编程语言中都是如此。&lt;/p&gt;

&lt;p&gt;在您键入CREATE DATABASE pythonprogramming; （首先注意和记住，你将总是用分号完成你的线）注意输出：
&lt;code class=&quot;highlighter-rouge&quot;&gt;Query OK, 1 row affected (0.00 sec)&lt;/code&gt;
这是相当标准的输出语法，你会看到，它是有用的，总是阅读它。如果有错误，你会得到一个错误，但有时你认为你可能只是影响一行，而是影响了数百万。我们会很快谈到更多，但永远记住，MySQL没有’撤销’。木已成舟，覆水难收。我们将在后面讨论一些关于如何做的想法的“最佳实践”&lt;/p&gt;

&lt;p&gt;现在我们有了我们的数据库，我们想要一个表，我们要称它为用户。&lt;/p&gt;

&lt;p&gt;首先，我们需要输入我们想要使用的数据库，所以我们需要做：&lt;/p&gt;

&lt;p&gt;USE pythonprogramming;&lt;/p&gt;

&lt;p&gt;很容易忘记这个步骤，特别是因为你将主要通过你的程序与SQL交互，而不是手。&lt;/p&gt;

&lt;p&gt;CREATE TABLE users (uid INT(11) AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20), password VARCHAR(100), email VARCHAR(50), settings VARCHAR(32500), tracking VARCHAR(32500), rank INT(3));&lt;/p&gt;

&lt;p&gt;现在这可能不是最有效的表，我们可能会更好地使用不同类型的数据比VARCHAR的设置和跟踪，但VARCHAR应该是我们的用途。如果您希望数据库具有可能同时访问的数百万行数据，那么您将需要测试许多数据类型。有许多形式的数字数据，如FLOAT，INT，BIG-INT …等，许多文本，如BLOB。&lt;/p&gt;

&lt;p&gt;如果您曾经忘记了表中的列或数据类型，则可以执行以下操作：&lt;/p&gt;

&lt;p&gt;DESCRIBE users;&lt;/p&gt;

&lt;p&gt;这将输出表结构。&lt;/p&gt;

&lt;p&gt;你也可以在这里运行SQL查询，如INSERT，SELECT，UPDATE，DELETE和所有有趣的东西，但我们更感兴趣，通过我们的程序这样做。您还可以在Flask应用程序中创建数据库和表。您可以通过检查表是否存在来执行此操作，如果不存在，则创建它。我发现更容易手工做，但是如果你正在为用户系统创建某种模块，那么你想包括为下载你的模块的人创建初始表。如果你发现自己是一个自由的Web开发人员，一遍又一遍地，你可能想要一个自己的脚本，它也是！&lt;/p&gt;

&lt;p&gt;所有这些，我们现在更感兴趣的是让我们的程序连接到MySQL数据库用于插入目的。现在，键入QUIT以退出您的服务器中的MySQL客户端。&lt;/p&gt;</content><category term="MySQL" /><category term="flask" /><summary type="html">创建MySQL数据库和表Flask教程</summary></entry><entry><title type="html">shadowinstaller</title><link href="https://zhuio.github.io/shadowinstaller/" rel="alternate" type="text/html" title="shadowinstaller" /><published>2017-02-11T00:04:00+08:00</published><updated>2017-02-11T00:04:00+08:00</updated><id>https://zhuio.github.io/shadowinstaller</id><content type="html" xml:base="https://zhuio.github.io/shadowinstaller/">&lt;h1 id=&quot;shadowsocks一键配置脚本&quot;&gt;shadowsocks一键配置脚本&lt;/h1&gt;
&lt;p&gt;默认配置：
服务器端口：自己设定（如不设定，默认为6565）
客户端端口：1080
密码：自己设定（如不设定，默认为hjkbnm）
备注：脚本默认创建单用户配置文件，如需配置多用户，安装完毕后参照下面的教程 sample 手动修改配置文件后重启即可。&lt;/p&gt;

&lt;p&gt;客户端下载：
&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-windows/releases&quot;&gt;https://github.com/shadowsocks/shadowsocks-windows/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用方法：
使用root用户登录，运行以下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget --no-check-certificate https://raw.githubusercontent.com/zhuio/shadowsocksinstaller/master/shadowsocks.sh
chmod +x shadowsocks.sh
./shadowsocks.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装完成后，脚本提示如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Congratulations, shadowsocks install completed!
Your Server IP:your_server_ip
Your Server Port:your_server_port
Your Password:your_password
Your Local IP:127.0.0.1
Your Local Port:1080
Your Encryption Method:aes-256-cfb
Enjoy it!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;卸载方法：
使用root用户登录，运行以下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./shadowsocks.sh uninstall
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;配置文件路径：/etc/shadowsocks.json&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6565&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;local_address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;local_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yourpassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;fast_open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;多用户多端口配置文件 ：
配置文件路径：/etc/shadowsocks.json&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;local_address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;local_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;port_password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;8989&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;9001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;9002&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;9003&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;9004&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password4&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;fast_open&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用命令：
启动：/etc/init.d/shadowsocks start
停止：/etc/init.d/shadowsocks stop
重启：/etc/init.d/shadowsocks restart
状态：/etc/init.d/shadowsocks status&lt;/p&gt;</content><category term="shadowsocks" /><summary type="html">shadowsocks一键配置脚本
默认配置：
服务器端口：自己设定（如不设定，默认为6565）
客户端端口：1080
密码：自己设定（如不设定，默认为hjkbnm）
备注：脚本默认创建单用户配置文件，如需配置多用户，安装完毕后参照下面的教程 sample 手动修改配置文件后重启即可。</summary></entry></feed>
